#!/bin/bash -e
# author: Miriam Weaverdyck 8/1/16
# bash write_pfile_prep $ext
#
# this script writes out the parameters to the p_study.m file 
# (a matlab file to be read by SPM12w)
#
# INPUT VARIABLE:
# $ext: str = extension to filename (should reflect which step the temp pfile is for)
#################################################################################
# NOTE: must input 0, 1, or 2 arguments.
# Arguments:
#  IF ONLY ONE TASK LISTED IN STUDY_INFO:
#    no args 	: creates a general pfile and reads from pars.par
#    'uw' 		: creates a temp pfile with extension '_uw' and reads from step.par
#  IF ONE OR MORE TASKS LISTED IN STUDY_INFO:
#    'TSK'    	: creates a general pfile for task TSK and reads from that task's pars.par file
#    'TSK' 'uw' : creates a temp pfile with extension '_TSKuw' and reads from step.par


label='[PFILE_SPM]'

pushd `dirname $0` > /dev/null   # move into this directory, quietly

source ../scripts/globals.par

# set file name and folder based on whether or not this is a temp pfile
if [[ $# -eq 0 ]] && [[ $NUM_TASKS -eq 1 ]]; then 
	# no inputs, only 1 task
	t=$TASKS
	fname=''; wd_raw=${RAW_DIR}/$t; 
	if [[ $PREP_SEP -eq 0 ]]; then source pars.par; else source pars_${t}.par; fi
elif [[ $# -eq 1 ]]; then 
	# 1 input
	if [[ $NUM_TASKS -eq 1 ]]; then
		# only 1 task, so input must be extension
		t=$TASKS
		fname="_temp_$t$1"; wd_raw=$PREP_DIR/$t/${wd_dir}; 
		source step.par
	else
		t=$1
		# more than 1 task, so input must be task name
		fname="_$t"; wd_raw=$RAW_DIR/$1; 
		if [[ $PREP_SEP -eq 0 ]]; then source pars.par; else source pars_$t.par; fi
	fi
elif [[ $# -eq 2 ]]; then
	# 2 inputs, task name and extension name
	t=$1
	fname="_temp_$t$2"; wd_raw=$PREP_DIR/$t/${wd_dir}; 
	source step.par
else echo "${label} You must input 0-2 arguments: ";
	echo "${label} 0 (if only one TASK exists!) to create a general pfile.";
	echo "${label} 1 (if only one TASK exists!) to create a temporary pfile with the inputted extension.";
	echo "${label} 1 (if more than one TASK exists!) to create a general pfile for inputted TASK.";
	echo "${label} 2 to create a temporary pfile for TASK (first input) and with an extension (second input).";
	echo "${label} Aborting..."; exit; 
fi

popd > /dev/null   # return to the previous directory, quietly

save_dir=${PROJECT_DIR}/${SCRIPT_DIR_SPMw}
fname_full=${save_dir}/p_SPM12w${fname}.m

if [[ $QA == 'SPM' ]]; then qa=1; else qa=0; fi

if [[ $SLICE_TIME == 'SPM' ]]; then slice_time=1; else slice_time=0; fi

if [[ $REALIGN == 'SPM' ]]; then realign=1; else realign=0; fi

if [[ $UNWARP == 'SPM' ]]; then unwarp=1; else unwarp=0; fi

if [[ $SMOOTH_SOFT == 'SPM' ]]; then smooth=$SMOOTH; else smooth=0; fi

if [[ $SNR == 'SPM' ]]; then snr=1; else snr=0; fi

if [[ $SLICES == 'SPM' ]]; then slices=1; else slices=0; fi


cat <<EOT > $fname_full
% spm12w r6225
% Parameters file for fMRI preprocessing
% Last updated: August, 2016
% =======1=========2=========3=========4=========5=========6=========7=========8

% User name
p.username      = '$USER'

% Paths and names
p.study_dir     = '$PROJECT_DIR';
p.prep_name     = 'SPM';
p.rawdir        = '$wd_raw'

% Preprocessing Routines - 1=yes 0=no
          
p.slicetime     = $slice_time;        
p.realign       = $realign;        
p.unwarp        = $unwarp;            % Unwarping (correct field inhomogeneties)      
p.smoothing     = $smooth;            % Size of smoothing kernel in FWHM (0 for no smoothing)
p.snr           = $snr;            % make SNR analysis document
p.slices        = $slices;        
p.cleanup       = 1;            % delete intermediate files 0 (keep all), 1 (keep last), 
                                % 2 (keep last 2), 3 (keep last 2 and originals)
p.cleanupzip    = 0;            % Zip up the final stages

% Not currently working
p.normalize     = 'none';       % Normalize type ('none','epi','spm12','dartel')

% Uncomment and set equal to 1 or 0 if changing from default
%p.tripvols     = ;         
%p.shuffle      = ;         
%p.despike      = ;

EOT

echo "${label} Done. Finished writing $fname_full"

# unset temporary variables so they can be reused
unset wd_raw
unset fname
