#!/bin/bash -e
# author: Miriam Weaverdyck 8/1/16
# ------------------------------------------------------------------------------
# this script writes out the parameters to the p_study.m file 
# (a matlab file to be read by SPM12w)
#################################################################################
# NOTE: must input 0, 1, or 2 arguments.
# Arguments:
#  IF ONLY ONE TASK LISTED IN STUDY_INFO:
#    no args 	: creates a general pfile and reads from pars.par
#    'uw' 		: creates a temp pfile with extension '_uw' and reads from step.par
#  IF ONE OR MORE TASKS LISTED IN STUDY_INFO:
#    'TSK'    	: creates a general pfile for task TSK and reads from that task's pars.par file
#    'TSK' 'uw' : creates a temp pfile with extension '_TSKuw' and reads from step.par

set -e # stop immediately when an error occurs
label='[PFILE_DAR]'

pushd `dirname $0` > /dev/null   # move into this directory, quietly

source ../scripts/globals.par

# set file name and folder based on whether or not this is a temp pfile
if [[ $# -eq 0 ]] && [[ $NUM_TASKS -eq 1 ]]; then 
	# no inputs, only 1 task
	t=$TASKS
	if [[ $PREP_SEP -eq 0 ]]; then source pars.par; else source pars_${t}.par; fi
	fname=''; wd_raw=${RAW_DIR}/$t; 
elif [[ $# -eq 1 ]]; then 
	# 1 input
	if [[ $NUM_TASKS -eq 1 ]]; then
		# only 1 task, so input must be extension
		t=$TASKS
		source step.par
		fname="_temp_$t$1"; wd_raw=$PREP_DIR/$t/${wd_dir}; 
	else
		# more than 1 task, so input must be task name
		t=$1
		if [[ $PREP_SEP -eq 0 ]]; then source pars.par; else source pars_$t.par; fi
		fname="_$t"; wd_raw=$RAW_DIR/$1; 
	fi
elif [[ $# -eq 2 ]]; then
	# 2 inputs, task name and extension name
	t=$1
	source step.par
	fname="_temp_$t$2"; wd_raw=$PREP_DIR/$t/${wd_dir}; 
else echo "${label} You must input 0-2 arguments: ";
	echo "${label} 0 (if only one TASK exists!) to create a general pfile.";
	echo "${label} 1 (if only one TASK exists!) to create a temporary pfile with the inputted extension.";
	echo "${label} 1 (if more than one TASK exists!) to create a general pfile for inputted TASK.";
	echo "${label} 2 to create a temporary pfile for TASK (first input) and with an extension (second input).";
	echo "${label} Aborting..."; exit; 
fi

popd > /dev/null   # return to the previous directory, quietly

save_dir=${PROJECT_DIR}/${SCRIPT_DIR_DARTEL}
fname_full=${save_dir}/p_${DARTEL}${fname}.m

spm8_dir=${PKG_DIR}/SPM8
NIfTI_dir=${PKG_DIR}/NIfTI

if [[ $REALIGN == ${DARTEL} ]]; then realign=1; else realign=0; fi

if [[ $NORM == ${DARTEL} ]]; then norm=1; else norm=0; fi

if [[ $SMOOTH_SOFT == ${DARTEL} ]]; then smooth=$SMOOTH; else smooth=0; fi

cat <<EOT > ${fname_full}
% Parameters file for SPM8 DARTEL normalization
% Last updated: August 2016
% =======1=========2=========3=========4=========5=========6=========7=========8

% SPM packages to load
p.pkg_dir       = '${pkg_dir}';
p.spm8_dir      = '${spm8_dir}';
p.NIfTI_dir     = '${NIfTI_dir}';
p.scripts_dir   = '${PROJECT_DIR}/${SCRIPT_DIR_DARTEL}';

% study directory
p.proj_dir      = '${PROJECT_DIR}';
p.output        = '${OUT_DIR}';

% execute the job immediately? (0 = no, 1 = yes)
p.execTAG       = 1;

% customizable preprocessing parameters
p.vox_size      = ${VOX_SIZE};
p.smooth        = ${smooth};
p.normalize     = ${norm};
p.realign       = ${realign};

% subjects directory containing subject folders
p.subdir        = '${wd_raw}';
% pattern for finding subject folders (use wildcards)
p.subID         = 's*';
% do which subjects? ('all' to do all)
%p.subTAG        = 'all'; # DARTEL does not currently use subTAG
% pattern for finding functional run files (use wildcards)
p.runID         = 'epi_r*';
% pattern for finding matched-bandwidth image (use wildcards)
p.mprageID      = 'anat*.nii';

% format of your raw functional images (1=img/hdr, 2=4D nii)
p.funcFormat    = 2;

% path for tissue probability maps (in spm8/tpm) for 'new segment'
p.TPMimg        = '$spm8_dir/toolbox/Seg/TPM.nii';

EOT
echo "${label} Done. Finished writing ${fname_full}"

# unset temporary variables so they can be reused
unset wd_raw
unset fname