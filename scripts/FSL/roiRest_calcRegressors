#!/usr/bin/env bash
#
# jmildner@princeton.edu, May 29 2017
#
################################################################################----------
# Files sourced
#  globals.par
# Flags:
#   [a]                    : all nuisance regressor steps with default parameters
#   [h <high pass filter>] : high pass filter (in seconds). Default: 111
#   [l <low pass filter>]  : low pass filter (in seconds). Default: -1 (off)
#   [m]                    : re-format motion parameters
#   [t <# of TRs to trim>] : trim volumes from start of scan. Default: 6
#   [i]                    : normalize intensity
#   [w <white matter vol>] : create white matter regressor from WM volume (in prep_dir)
#                            default: DARTEL's mwc2anat
#   [c <CSF vol>]          : create CSF regressor from specified CSF volume (in prep_dir)
#                           default: DARTEL's mwc3anat
#   <prep_dir>             : full path to prep_dir that contains the resting state epi('s)
#  MUST PROVIDE AT LEAST ONE FLAG AND PREP_DIR
################################################################################----------
#SBATCH -J 'gen_reg'                         # Job name
#SBATCH --workdir=./                          # Set working directory
#SBATCH -o '../output/gen_reg-%j.out'     # Output file
#SBATCH --mem-per-cpu=10240
#SBATCH --mail-type=FAIL
#SBATCH -t 240                               # Run time : Default time is 24 hours (2880 min)
#SBATCH -p all

set -e
echo "on node: $(hostname) "

module load fsl/5.0.9

function help_func () {
cat << END
roiRest_calcRegressors
Description:
------------

Usage:
------
  [-h | --help | -help]
    Display this help

END
}
################################################################################
#First, check for help flag (multi-character flags not supported by getopts)
if [[ $@ =~ --help|-help ]]; then help_func; exit; fi

label='[GEN_REGR]'

# Get globals
#Check if PROJECT_DIR is already known
if [[ ! -z $PROJECT_DIR ]]; then
  source ${PROJECT_DIR}/scripts/globals.par
#check if globals is in the current directory
elif [[ -f ./globals.par ]]; then
  source globals.par
#Check if we're not inside a slurm job
elif [[ -z $SLURM_JOB_ID ]]; then
  #Get the name of the directory this script is in, to create full path to globals.par
  script_dir="$( cd "${BASH_SOURCE%/*}" ; pwd -P )"
  #Assuming the scripts dir is somewhere in the full path, this finds globals.par
  source "${script_dir%scripts/*}/scripts/globals.par"
#error out if we can't find globals with any of these strategies
else
  echo "$label ERROR: can't find globals.par. Please source globals.par before starting."
  exit
fi

#intialize bandpass filters
hFilter=-1
lFilter=-1
# Parse input arguments
while getopts ":mt:ih:l:w:c:a" opt; do
  case $opt in
    m)
      motion=true
    ;;
    t)
      trim=true
      trimvols="${OPTARG}"
    ;;
    i)
      intens=true
    ;;
    h)
      bandpass=true
      hFilter="${OPTARG}"
    ;;
    l)
      bandpass=true
      lFilter="${OPTARG}"
    ;;
    w)
      WM=true
      WM_vol="${OPTARG}"
    ;;
    c)
      CSF=true
      CSF_vol="${OPTARG}"
    ;;
    #//todo o: motion outliers
    a)
      motion=true
      trim=true
      trimvols=6
      intens=true
      bandpass=true
      hFilter=111
      lFilter=-1
      WM=true
      WM_vol=mwc2anat
      CSF=true
      CSF_vol=mwc3anat
    ;;
    h)
      help_func
      exit
    ;;
    \?)
    echo "$label ERROR: unknown flag specified: ${opt}. Use --help for help."
    exit 1
    ;;
    : )
    echo "$label ERROR: $OPTARG requires an argument. Use --help for help."
    exit 1
    ;;
  esac
done

#remove used input args
shift $((OPTIND -1))
#check if there are remaining arguments, that have not yet been processed
if [[ -z $@ ]]; then
  echo "$label ERROR: missing prep_dir ${@}. Use --help for help"
  exit 1
fi

prep_dir="$@"

if [[ ! -d $prep_dir ]]; then
  echo "${label} ERROR: ${prep_dir} is not a directory."
  exit 1
fi
rst_prep_dir="${prep_dir}/rst_prep"
tmp_rst_dir=$(mktemp -d --tmpdir rst_prep.XXXXXX)
function finish {
  rsync -a "${tmp_rst_dir}/" "${rst_prep_dir}/" > /dev/null
  rm -rf "${tmp_rst_dir}"
  }
  trap finish EXIT
mkdir -p "${rst_prep_dir}"
cp -r "${rst_prep_dir}/." "${tmp_rst_dir}"
logfile="${tmp_rst_dir}/LOG_calcRegressors.txt"
touch ${logfile}
echo "${label} $(date)"
echo "${label} generating regressors for epi's in ${prep_dir#"${PROJECT_DIR}"}" \
  | tee "${logfile}"
################################################################################
for epi in $prep_dir/epi_r*.nii.gz; do
  #make sure it exists
  [ -e $file ] || (echo "$label ERROR: $epi not found" | tee -a "${logfile}" && exit)
  #get just the epi name
  epi=$(basename "$epi")
  fslmaths "${prep_dir}/$epi" -nan "${tmp_rst_dir}/$epi"
  nvols=$(fslnvols "${tmp_rst_dir}/$epi")
  moco_dir="${tmp_rst_dir}/mc_${epi%.nii*}"
  #motion regressors: change from 1 file with 6 columns to 1 file per parameter
  if [ "${motion}" = true ]; then
    echo "${label} creating motion regressors for ${epi}" | tee -a "${logfile}"
    mkdir -p "${moco_dir}"
    cat "${prep_dir}/r${epi}.par" \
    	| tr -s " " > "${moco_dir}/func_mcf.par"
    #create one file per column of motion pars
    cut -d ' ' -f 1  "${moco_dir}/func_mcf.par" > "${moco_dir}/motion1.par"
    cut -d ' ' -f 2  "${moco_dir}/func_mcf.par" > "${moco_dir}/motion2.par"
    cut -d ' ' -f 3  "${moco_dir}/func_mcf.par" > "${moco_dir}/motion3.par"
    cut -d ' ' -f 4  "${moco_dir}/func_mcf.par" > "${moco_dir}/motion4.par"
    cut -d ' ' -f 5  "${moco_dir}/func_mcf.par" > "${moco_dir}/motion5.par"
    cut -d ' ' -f 6  "${moco_dir}/func_mcf.par" > "${moco_dir}/motion6.par"
  fi
  #trim first n volumes from start of epi and motion parameters
  if [ "${trim}" = true ]; then
    echo "${label} trimming first ${trimvols} volumes from ${epi}" | tee -a "${logfile}"
    new_nvols=$(( $nvols - $trimvols ))
    #trim volumes from beginning of epi
    fslroi "${tmp_rst_dir}/${epi}" "${tmp_rst_dir}/t${epi}" ${trimvols} ${new_nvols}
    #trim first volumes from motion parameter files as well
    tail "-${new_nvols}" "${moco_dir}/motion1.par" > "${moco_dir}/res_motion1.par"
    tail "-${new_nvols}" "${moco_dir}/motion2.par" > "${moco_dir}/res_motion2.par"
    tail "-${new_nvols}" "${moco_dir}/motion3.par" > "${moco_dir}/res_motion3.par"
    tail "-${new_nvols}" "${moco_dir}/motion4.par" > "${moco_dir}/res_motion4.par"
    tail "-${new_nvols}" "${moco_dir}/motion5.par" > "${moco_dir}/res_motion5.par"
    tail "-${new_nvols}" "${moco_dir}/motion6.par" > "${moco_dir}/res_motion6.par"
  fi
  #update epi with the trimmed epi, if it exists
  if [[ -f "${tmp_rst_dir}/t${epi}" ]]; then
    cp "${tmp_rst_dir}/t${epi}" "${tmp_rst_dir}/${epi}"
    echo "${label} copied trimmed ${epi} to ${tmp_rst_dir}/${epi}" | tee -a ${logfile}
  fi

  #intensity normalization
  if [ "${intens}" = true ]; then
    echo "${label} normalizing intensity of ${epi}" | tee -a "${logfile}"
    #normalize intensity per 3D volume mean (-inm option)
    fslmaths "${tmp_rst_dir}/${epi}" -inm 10000 "${tmp_rst_dir}/n${epi}"
  fi
  #if there is a normalized epi, update epi with it
  if [[ -f "${tmp_rst_dir}/n${epi}" ]]; then
    cp "${tmp_rst_dir}/n${epi}" "${tmp_rst_dir}/${epi}"
    echo "${label} copied intensity normalized ${epi} to ${tmp_rst_dir}/${epi}" |\
      tee -a ${logfile}
  fi

  #bandpass filter
  if "${bandpass}"; then
    echo "${label} bandpass filtering $epi" | tee -a "${logfile}"
    hp=-1
    lp=-1
    TR=$( fslval "${tmp_rst_dir}/${epi}" "pixdim4" )
    if [[ $hFilter != -1 ]]; then
      hp=$(echo "${hFilter}/(${TR}*2)" | bc -l )
      echo "${label} high pass filter is ${hFilter} seconds, sigma ${hp}" \
        | tee -a "${logfile}"
    fi
    if [[ $lFilter != -1 ]]; then
      lp=$(echo "$lFilter/($TR*2)" | bc -l )
    fi
    #calculate the mean timecourse
    echo "${label} using high pass sigma ${hp}, low pass sigma ${lp}" \
      | tee -a "${logfile}"
    fslmaths "${tmp_rst_dir}/${epi}" -Tmean "${tmp_rst_dir}/tempMean"
    #bandpass filter and add the mean back (-bptf removes the mean)
    fslmaths "${tmp_rst_dir}/${epi}" -bptf "${hp}" "${lp}" \
      -add "${tmp_rst_dir}/tempMean" "${tmp_rst_dir}/f${epi}"
  fi
  #update the epi with the filtered image, if it exists
  if [[ -f "${tmp_rst_dir}/f${epi}" ]]; then
    cp "${tmp_rst_dir}/f${epi}" "${tmp_rst_dir}/${epi}"
    echo "${label} copied filtered ${epi} to ${tmp_rst_dir}/${epi}" | tee -a ${logfile}
  fi

  #extract white matter time course
  if "${WM}"; then
    echo "${label} extracting white matter timecourse" | tee -a "${logfile}"
    fslmaths "${prep_dir}/${WM_vol}" -nan -thr 0.8 -bin "${prep_dir}/WM_mask"
    fslmeants -i "${tmp_rst_dir}/epi_r01.nii.gz" -o "${tmp_rst_dir}/WM_meants.txt" \
    	-m "${prep_dir}/WM_mask"
  fi
  if "${CSF}"; then
    echo "${label} masking CSF volume with ventricle mask" | tee -a "${logfile}"
    VentricleMask="${tmp_rst_dir}/wVentricleMask"
    if [[ ! -f "${VentricleMask}" ]]; then
      bash "${SCRIPT_DIR}/FSL/gen_ventricle_mask" -r "${prep_dir}/wanat" \
        -d "${tmp_rst_dir}"
    fi
    echo "${label} extracting ventricle CSF timecourse" | tee -a "${logfile}"
    fslmaths "${prep_dir}/${CSF_vol}" -nan -mas "${VentricleMask}" "${prep_dir}/CSF_mask"
    fslmaths "${prep_dir}/CSF_mask" -nan -thr 0.1 -bin "${prep_dir}/CSF_mask"
    fslmeants -i "${tmp_rst_dir}/${epi}" -o "${tmp_rst_dir}/CSF_meants.txt" \
    	-m "${prep_dir}/CSF_mask"
  fi
done
rsync -a --remove-source-files "${tmp_rst_dir}/" "${rst_prep_dir}/"
rm -rf ${tmp_rst_dir}
