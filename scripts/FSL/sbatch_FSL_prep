#!/bin/bash
# sbatch_FSL_prep
#
# May 1, 2017: Miriam Weaverdyck updated script to work with new filestructure
#
# Launches preprocessing in FSL based on specified parameters in pfile
#
################################################################################----------
# Packages used:
#  fsl
#
# Files sourced:
#  globals.par
#  funcs
#  pfile
#
# Flags:
#  [-h]   : help
#  -p     : pfile to be sourced
#  [-l]   : logfile (full path, overrides default)
#  [-i]   : where to look for full list of subjects (e.g. raw/TSK/)
#  [-o]   : where to look for already-run subjects (e.g. prep/TSK/aNrNuNwNsN)
#
# Arguments (0+):
#  subs   : subjects to run
################################################################################----------

#SBATCH -J FSL_prep               # Job name
#SBATCH --workdir=./              # Working directory
#SBATCH -o FSL_prep-%j.out     # Output file
#SBATCH --mem-per-cpu=30720       # Amount of memory in MB (1GB = 1024 MB)
#SBATCH --mail-type=FAIL          # Type of emails to send
#SBATCH -t 1440                   # Run time : Default = 24 hours (2880 min)
#SBATCH -p all                    # DON'T CHANGE

set -e
echo "on host: `hostname` "
label='[FSL]'

######################### SOURCE FILES ########################################
# Get the name of the directory this script is in to create full path to globals.par
d="$(dirname -- "$(pwd)")"
# source globals.par
source "${d%scripts*}/scripts/globals.par"
# source functions
source ${SCRIPT_DIR_UTIL}/funcs

######################### SET UP & PARSE ARGUMENTS #############################
function help_func () {
cat << END
  sbatch_FSL_prep [-lh] -p <pfile> [-i <input_dir>] [-o <output_dir>] [-l <logfile>]
  Description:
  ------------
    Launches preprocessing in FSL based on specified parameters in pfile
  Usage:
  ------
    [-h | --help | -help]
      Display this help
    -p <filename>
      filename of pfile
    [-i <input_directory>]
      directory to look in for valid subjects 
      Default is raw directory
    [-o <output_directory>]
      directory to look in for already-run subjects
      Default is prep directory specified in pfile
    [-l <filename>]
      Overrides the default log file location with a different file.
      Default is LOG_spmw.txt in prep directory specified in pfile
END
}
#First, check for help flag (multi-character flags not supported by getopts)
if [[ $@ =~ -h|--help|-help ]]; then help_func; exit; fi

#Parse flags other than help
while getopts "p:i:o:l:" opt; do
  case $opt in
    p)
      pfile=${SCRIPT_DIR_FSL}/$(basename $OPTARG)
      if [ ! -f $pfile ]; then
        echo "$label ERROR: pfile $pfile does not exist."
        exit 1
      fi
      echo "$label Using pfile: $pfile"
      ;;
    i)
    input_dir=$OPTARG
      if ! $(isDIR ${input_dir}); then
        echo "$label ERROR: input directory $input_dir is not a directory."
        exit 1
      fi
      input_dir=$(full_dir $input_dir)
      echo "$label input_dir: $input_dir"
      ;;
    o)
    output_dir=$OPTARG
      if ! $(isDIR ${output_dir}); then
        echo "$label ERROR: output directory $output_dir is not a directory."
        exit 1
      fi
      output_dir=$(full_dir $output_dir)
      echo "$label output_dir: $output_dir"
      ;;
    l)
      flogfile=$OPTARG
      logdir=$(dirname $flogfile)
      if ! $(isDIR $logdir); then
        echo "$label ERROR: $logdir is not a directory."
        exit 1
      fi
      logdir=$(full_dir $logdir)
      flogfile=${logdir}/$(basename $flogfile)
      touch $flogfile
      echo "$label Using logfile: $flogfile instead of default" | tee -a $flogfile
      ;;
    \?)
      echo "$label ERROR: unknown flag specified: ${opt}. Use -h for help."
      exit 1
      ;;
    : ) #Catch options without arguments
      echo "$label ERROR: -$OPTARG requires an argument. Use -h for help."
      exit 1
    esac
done
[[ -z $pfile ]] && echo "$label ERROR: -p flag required. Use -h for help." && exit 1
#remove used input args
shift $((OPTIND -1))

############################## MAIN BODY OF SCRIPT #############################
# extract the wd and wd/sdir folder location from the pfile by grabbing the quoted section
# of the line that starts with "p.prepdir /whitespace/ = " and ends before ";"
# wd_dir=$(grep -oP 'p.prepdir\s*=\s\K'.*?'(?=;)' ${pfile} | tr -d \')
# # get task name based on wd_dir
# tsk_dir=$(dirname $wd_dir)
# tsk=${tsk_dir: -3}

module load fsl

# source the pfile
source ${SCRIPT_DIR_FSL}/$(basename $pfile)
tsk=$TASK

# if input_dir doesn't exist, use default from pfile
[[ -z ${input_dir} ]] && input_dir=${RAW_DIR}/${tsk}/
# if output_dir doesn't exist, use default from pfile
[[ -z ${output_dir} ]] && output_dir=$PREP
# if logfile doesn't exist, use default from pfile
[[ -z $flogfile ]] && logdir=${output_dir}

#check if there are remaining arguments, that have not yet been processed
# if so, get subject IDs by calling get_subs
get_subs $input_dir $output_dir "$@"
run_subs=( "${SUBS[@]}" )

# extract prefix list from parameters file by finding the string between 3 uppercase letters and .m
steps=$(echo "${pfile}" | grep -Po '.*\_[A-Z][A-Z][A-Z]\K.*?(?=.m)')

# cycle through subjects 
for subid in "${run_subs[@]}"; do 

  fsl_prep=${PREP}/${subid}
  anat=${fsl_prep}/anat.nii.gz
  anat_base=${fsl_prep}/anat
  anat_brain=${fsl_prep}/anat_brain.nii.gz
  std_anat=${fsl_prep}/std_anat
  
  if [[ -z $flogfile ]]; then logfile="${fsl_prep}/fsl_log.txt"; 
  else logfile=$flogfile; fi

  echo "${label} $(date) Beginning FSL preprocessing analysis of subject ${subid} \
with pfile ${pfile}" | tee -a "${logfile}"

  # Prepare anatmoical for normalization, if necessary
  if [[ $NORM == 1 ]]; then
    if [[ ! -f $anat ]]; then 
    echo "$label $(date) Anatomical $anat not found in $fsl_prep" | tee -a "$logfile" 
    exit 1; fi
    echo "$label $(date) Preparing anatomical for normalization." | tee -a "$logfile"
    #Skull strip (remove excess neck tissue first)
    standard_space_roi $anat "$std_anat"
    bet "$std_anat" $anat_brain $anat_bet_flag
    #Linear registration of anat_brain to MNI template
    echo "$label $(date) Registering anatomical to MNI space." | tee -a "$logfile"
    flirt -ref "$fsl_template" -in "$anat_brain" -omat anat_affine_transf.mat -o "${anat_base}2MNI"
    #Non-linear registration of anat_brain to template
    fnirt --in=$anat_brain --aff=anat_affine_transf.mat --cout=anat_nonlinear_transf \
           --config=T1_2_MNI152_2mm --iout=nonlinear_anat2MNI
    echo "$label $(date) Prepared anatomical for normalization." | tee -a "$logfile"
  fi

  for epi in ${fsl_prep}/epi_r*.nii*; do
    #set local variables for this subject and task.
    epi_name="$(basename $epi)"
    time_file="${fsl_prep}/a${epi_name}"
    motion_file="${fsl_prep}/r${epi_name}"
    unwarp_file="${fsl_prep}/u${epi_name}"
    smooth_file="${fsl_prep}/s${epi_name}"
    normalize_file="${fsl_prep}/w${epi_name}"
    SE_AP="${fsl_prep}/${tsk}_SE_AP.nii*"
    topup_dir="${PREP_DIR}/topup/${subid}"
    if [ ! -f $SE_AP ]; then 
    	SE_AP="$(dirname $SE_AP)/ALL_SE_AP.nii*" 
    	topup_dir=${PREP_DIR}/topup/${subid}
    fi
    mkdir -p $topup_dir
    SE_PA="${SE_AP%AP.nii*}PA.nii*"
    if [ ! -f ${logfile} ]; then touch ${logfile}; fi
    
    if [[ $SLICETIME == 1 ]]; then
      echo "$label $(date) Running slice timing $epi" | tee -a "$logfile"
      slicetimer -i "$epi" -o "$time_file" --odd
      cp $time_file $epi
      echo "${label} $(date) Ran slicetimer on $epi" | tee -a "$logfile"
#    else 
#      cp $epi $time_file
#      echo "$(date) skipped slicetimer and copied raw as $time_file." >> "$logfile"
    fi
    
    if [[ $MOTION == 1 ]]; then
      echo "$label $(date) Running motion correction on $epi." | tee -a "$logfile"
      mcflirt -in $epi -refvol $SE_AP -o $motion_file -mats -plots
      cp $motion_file $epi
      echo "${label} $(date) Ran motion correction on $epi" | tee -a "$logfile"
#     else
 #      cp $epi $time_file
  #     echo "$(date) skipped mcflirt and copied $time_file as $motion_file." >> "$logfile"
    fi
    

    if [[ $UNWARP == 1 ]]; then
      
      if [ ! -f ${topup_dir}/topup_logout ]; then
      echo "$label $(date) Starting topup." | tee -a "$logfile"
      fslmerge -t ${topup_dir}/all_SE_epi ${SE_AP} ${SE_PA}
      declare -a APinfo=($(fslinfo ${SE_AP})) #make array out of header info for AP epi to use in readout time calculation
      declare -a PAinfo=($(fslinfo ${SE_PA}))
      echo 'Generating acqparams file' | tee -a "$logfile"
      if [ -e "${topup_dir}/acqparams.txt" ]; then rm -f 'acqparams.txt'; fi
      readout=(${APinfo[3]}/${EPI_ACCEL}-1)*$EPI_ECHOSPACING
      readout=$(echo "$readout" | bc -l)
      for i in $(eval echo "{1..${APinfo[9]}}") ; do
         cat >> ${topup_dir}/acqparams_epi.txt <<EOF
0 -1 0 $readout
EOF
      done
      for i in $(eval echo "{1..${APinfo[9]}}"); do
        cat >> ${topup_dir}/acqparams_epi.txt <<EOF
0 1 0 $readout
EOF
      done
      echo '$label $(date) Running topup' | tee -a "$logfile"
      topup --imain="${topup_dir}/all_SE_epi" --datain=${topup_dir}/acqparams_epi.txt --config=b02b0.cnf --out=${topup_dir}/topup_output --iout=${topup_dir}/topup_iout --fout=${topup_dir}/topup_fout --logout=${topup_dir}/topup_logout
      fi
      
      echo "$label $(date) Applying topup" | tee -a "$logfile"
      outfile=$unwarp_file
      applytopup --imain="$epi" --datain="${topup_dir}/acqparams_epi.txt" --inindex=1 --topup="${topup_dir}/topup_output" --method=jac -o "${outfile%.nii.gz}"
      cp $unwarp_file $epi
      echo "${label} $(date) Ran topup to unwarp $unwarp_file" | tee -a "$logfile"
  #  else
  #    cp $motion_file $unwarp_file
  #    echo "$(date) Skipped topup. Copied $motion_file to $unwarp_file" >> "$logfile"
    fi
    
    if [[ $NORM == 1 ]]; then
    # Normalize to MNI space
     #requires anatomical
     echo "$label $(date) Normalizing ${epi}.." | tee -a $logfile
    # 1. skull strip
      bet ${epi} "${epi%.nii*}_brain" $epi_bet_flag
     echo "$label $(date) Registering ${epi} to structural.." | tee -a $logfile
    # 2. register epi to structural
      epi_reg --epi="${epi%.nii*}_brain" --t1=$anat --t1brain=$anat_brain --out="${epi%.nii*}_brain2struct"      
    # 3. apply struct2MNI nonlinear warp
     echo "$label $(date) Registering ${epi} to MNI space.." | tee -a $logfile
      applywarp --ref="$fsl_template" --in="${epi%.nii*}_brain" --warp=anat_nonlinear_transf --premat="${epi%.nii*}_brain2struct.mat" --out="$normalize_file"
    
      cp $normalize_file $epi
     echo "$label $(date) Normalized ${epi} to MNI space.." | tee -a $logfile
    
    fi
  #smoothing 
    if [[ $FWHM != 0 ]]; then
      echo "$label $(date) smoothing $epi with kernel $FWHM" | tee -a "$logfile"
      sigma=`echo "2.35482004503*$FWHM" | bc -l` #calculate sigma value needed for FSL smoothing based on FWHM
      fslmaths $epi -s $sigma $smooth_file
      cp $smooth_file $epi
      echo "${label} $(date) Ran smoothing with $FWHM FWHM" | tee -a "$logfile"
    fi
  done
done
