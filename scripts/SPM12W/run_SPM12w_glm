#!/bin/env bash
# 
# May 8, 2017: Miriam Weaverdyck updated script to work with new filestructure/standards
#
# Run first level glm for all non-excluded subjects in prep dir for specified
# task and wd. Uses pfile specified (pfile should be saved in scripts/SPM12w)
# in SPM12w analysis. If move is turned on, the script will grab *.par files
# from preprocessing. 
#
################################################################################----------
# Packages used:
#  spm12
#  spm12w
#
# Files sourced:
#  globals.par
#  funcs
#  pfile
#
# Flags:
#  [-h]         : help
#  -p           : pfile to be sourced
#  [-l]         : logfile (full path, overrides default)
#  [-i]         : where to look for full list of subjects (e.g. raw/TSK/)
#  [-o]         : where to look for already-run subjects (e.g. prep/TSK/aNrNuNwNsN)
#  [-d] 	: dependency jobIDs (e.g. 1111111:2222222:3333333)
#
# Arguments (0+):
#  subs         : subjects to run
###############################################################################----------

set -e
label='[GLM]'

######################### SOURCE FILES ########################################
# Get the name of the directory this script is in to create full path to globals.par
d="$(dirname -- "$(pwd)")"
# source globals.par
source "${d%scripts*}/scripts/globals.par"
# source functions
source ${SCRIPT_DIR_UTIL}/funcs

######################### SET UP & PARSE ARGUMENTS #############################
function help_func () {
cat << END
  sbatch_SPM12w_prep [-lh] -p <pfile> [-i <input_dir>] [-o <output_dir>] [-l <logfile>] [-d <jobIDs>
  Description:
  ------------
	Launches preprocessing in matlab using SPM12w based on specified parameters in pfile
  Usage:
  ------
	[-h | --help | -help]
	  Display this help
	-p <filename>
	  filename of pfile
	[-i <input_directory>]
	  directory to look in for valid subjects 
	  Default is raw directory
	[-o <output_directory>]
	  directory to look in for already-run subjects
	  Default is prep directory specified in pfile
	[-l <filename>]
	  Overrides the default log file location with a different file.
	  Default is LOG_spmw.txt in prep directory specified in pfile
	[-d <jobIDs>]
	  jobIDs that these jobs will be dependent on. Valid forms are:
	a) dependency_flag=--dependency=afterok:1111111:2222222:3333333
	b) --dependency=afterok:1111111:2222222:3333333
	c) afterok:1111111:2222222:3333333
	d) 1111111:2222222:3333333
END
}
#First, check for help flag (multi-character flags not supported by getopts)
if [[ $@ =~ -h|--help|-help ]]; then help_func; exit; fi

#Parse flags other than help
while getopts "p:i:o:l:d:" opt; do
  case $opt in
    p)
      pfile=${SCRIPT_DIR_SPMW}/$(basename $OPTARG)
      if [ ! -f $pfile ]; then
        echo "$label ERROR: pfile $pfile does not exist."
        exit 1
      fi
      echo "$label Using pfile: $pfile"
      ;;
    i)
          input_dir=$OPTARG
      if ! $(isDIR ${input_dir}); then
        echo "$label ERROR: input directory $input_dir is not a directory."
        exit 1
      fi
      input_dir=$(full_dir $input_dir)
      echo "$label input_dir: $input_dir"
      ;;
    o)
          output_dir=$OPTARG
      if ! $(isDIR ${output_dir}); then
        echo "$label ERROR: output directory $output_dir is not a directory."
        exit 1
      fi
      output_dir=$(full_dir $output_dir)
      echo "$label output_dir: $output_dir"
      ;;
    l)
      flogfile=$OPTARG
      logdir=$(dirname $flogfile)
      if ! $(isDIR $logdir); then
        echo "$label ERROR: $logdir is not a directory."
        exit 1
      fi
      logdir=$(full_dir $logdir)
      flogfile=${logdir}/$(basename $flogfile)
      touch $flogfile
      echo "$label Using logfile: $flogfile instead of default" | tee -a $flogfile
      ;;
    d)
      jobIDs=$OPTARG
      if [[ ${jobIDs:0:1} == d ]]; then
        dependency_flag=${jobIDs:16}
      elif [[ ${jobIDs:0:2} == '--' ]]; then
        dependency_flag=$jobIDs
      elif [[ ${jobIDs:0:5} == after ]]; then
        dependency_flag='--dependency='$jobIDs
      elif $(isNUM ${jobIDs:0}); then
        dependency_flag='--dependency=afterok:'$jobIDs
      else
        echo "${label} ERROR: $jobIDs is not a valid dependency arg. Use -h for help."
        exit 1
      fi
      ;;
    \?)
      echo "$label ERROR: unknown flag specified: ${opt}. Use -h for help."
      exit 1
      ;;
    : ) #Catch options without arguments
      echo "$label ERROR: -$OPTARG requires an argument. Use -h for help."
      exit 1
    esac
done
[[ -z $pfile ]] && echo "$label ERROR: -p flag required. Use -h for help." && exit 1
#remove used input args
shift $((OPTIND -1))

############################## MAIN BODY OF SCRIPT #############################
# extract the wd and wd/sdir folder location from the pfile by grabbing the quoted section
# of the line that starts with "p.prepdir /whitespace/ = " and ends before ";"
wd_name=$(grep -oP 'wd\s*=\s\K'.*?'(?=;)' ${pfile} | tr -d \')
TSK=$(grep -oP 'tsk\s*=\s\K'.*?'(?=;)' ${pfile} | tr -d \')
wd_dir=${PREP_DIR}/${TSK}/${wd_name}

# extract the glm folder location from the pfile by grabbing the quoted section of the line that starts with "glm.glm_name /whitespace/ = " and ends before ";"
glm_name=$(grep -oP 'glm.glm_name\s*=\s\K'.*?'(?=;)' ${pfile} | tr -d \')
username=$(grep -oP 'glm.username\s*=\s\K'.*?'(?=;)' ${pfile} | tr -d \')
glm_basedir=${PROJECT_DIR}/analysis/${username}/glm
! $(isDIR $glm_basedir) && mkdir $glm_basedir
glm_dir=${glm_basedir}/${glm_name}
! $(isDIR $glm_dir) && mkdir $glm_dir

# if input_dir doesn't exist, use default from pfile
[[ -z ${input_dir} ]] && input_dir=${wd_dir}
# if output_dir doesn't exist, use default from pfile
[[ -z ${output_dir} ]] && output_dir=${glm_dir}
# if logfile doesn't exist, use default from pfile
[[ -z $flogfile ]] && logdir=${glm_dir} && logfile=${logdir}/LOG_glmlvl1_${TSK}_${wd}.txt

#check if there are remaining arguments, that have not yet been processed
# if so, get subject IDs by calling get_subs
get_subs $input_dir $output_dir "$@"
run_subs=( "${SUBS[@]}" )

unset all_jobs

if [[ ! -d $glm_dir ]]; then mkdir $glm_dir; fi

#If there is only one task, set prep sep to 0 so pars.par gets sourced instead of pars_TSK.par
[[ $PREP_SEP -eq 0 ]] && source ${PARS_DIR}/pars.par || source ${PARS_DIR}/pars_${TSK}.par

for sub in ${run_subs[@]}; do
  echo "${label} Beginning level 1 GLM analysis of $sub for $TSK with pfile $pfile" | tee -a $logfile
  logfile_sub=${glm_dir}/LOG_glmlvl1_${tsk}_${wd_dir}_${sub}.txt

  jobname=glm_${sub}
  flags="-o ${OUT_DIR}/${jobname}-%j.out --mail-user=$USER_EMAIL -J ${jobname} ${dependency_flag}"
  prev_jobid=$(sbatch $flags sbatch_SPM12w_glm -p $pfile -l ${logfile_sub} $sub | grep -o '[0-9]*')
  all_jobs+=":${prev_jobid}"
    
  echo "${label} ${jobname} job ${prev_jobid} submitted for level 1 GLM for $subject with pfile $pfile" | tee -a ${logfile_sub} $logfile
done

echo "${label} dependency_flag=--dependency=afterok${all_jobs}"
