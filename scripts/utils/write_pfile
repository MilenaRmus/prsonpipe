#!/bin/env bash
#
# authors: Miriam Weaverdyck & Judith Mildner
#---------------------------------------------------------------------------------
# This script writes out the parameters to the parameter file in the appropriate analysis
# package's scripts directory as p_<package>_<TSK><analysis prefixes>.m (e.g. p_DARTEL_TSKuws.m)
###################################################################################
# Requires  1, 2 or 3 input arguments
# Arguments:
#  If only one task listed in study_info.par:
#    package (e.g. 'FSL')                        : creates a general pfile for the specified package based on prep.par
#    preprocessing prefixes (e.g. 'DARTEL' 'uw') : creates a pfile for those specific steps with extension
#  If more than one task in study_info.par:
#    'DARTEL' 'TSK'          : creates a general pfile for task TSK and read form that task's prep_<TSK>.par file
#    'FSL' 'TSK' '<prefixes>' (e.g. DARTEL TSK uw) : creates a pfile with extendion '_TSKuw' and reads from step.par

set -e 

label='[PFILE]'
soft_opts=( 'DARTEL' 'SPM' 'SPMW' 'FSL' )

pushd $(dirname $0) > /dev/null
source ../globals.par

#first input argument is always software package:
soft=$1
shift
valid=0
for opt in ${soft_opts[@]}; do if [[ ${!opt} == ${soft} ]]; then valid=1; break; fi; done
if [[ $valid != 1 ]]; then echo "${label} invalid software input: $soft. You can choose one of: ${soft_opts[@]}"; exit; fi; 

# set file name and folder based on whether or not this is a temp pfile
if [[ $# -eq 1 ]] && [[ $NUM_TASKS -eq 1 ]]; then
        # no inputs, only 1 task
        t=$TASKS
        if [[ $PREP_SEP -eq 0 ]]; then source ${PARS_DIR}/prep.par; else source ${PARS_DIR}/prep_${t}.par; fi
        fname=''; wd_raw=${RAW_DIR}/$t;
elif [[ $# -eq 1 ]]; then
        # 1 input
        if [[ $NUM_TASKS -eq 1 ]]; then
                # only 1 task, so input must be extension
                t=$TASKS
                source ${PARS_DIR}/prep.par
                source ${PARS_DIR}/step.par
                fname="_$t$1"; wd_raw=$PREP_DIR/$t/${wd_dir};
        else
                # more than 1 task, so input must be task name
                t=$1
                if [[ $PREP_SEP -eq 0 ]]; then 
                  source ${PARS_DIR}/prep.par 
                else source ${PARS_DIR}/prep_$t.par; fi
                fname="_$t"; wd_raw=$RAW_DIR/$1;
        fi
elif [[ $# -eq 2 ]]; then
        # 2 inputs, task name and extension name
        t=$1
        if [[ $PREP_SEP -eq 0 ]]; then 
          source ${PARS_DIR}/prep.par 
        else source ${PARS_DIR}/prep_$t.par; fi
        source ${PARS_DIR}/step.par
        fname="_$t$2"; wd_raw=$PREP_DIR/$t/${wd_dir};
else echo "${label} You must input 1-3 arguments: ";
        echo "${label} 1 (if only one TASK exists!) to create a general pfile.";
        echo "${label} 2 (if only one TASK exists!) to create a temporary pfile with the inputted extension.";
        echo "${label} 2 (if more than one TASK exists!) to create a general pfile for inputted TASK.";
        echo "${label} 3 to create a temporary pfile for TASK (2nd input) and with an extension (3rd input).";
        echo "${label} Aborting..."; exit;
fi

popd > /dev/null   # return to the previous directory, quietly

#Add software name to directory variable (found in globals.par)
#eval script_dir='$SCRIPT_DIR_'"${soft}"
#get directory and filenames based on soft variable
save_dir=${PARS_DIR} #"${SCRIPT_DIR}/${soft}"
fname_full=${save_dir}/p_${soft}${fname}.m
spm8_dir=${PKG_DIR}/SPM8
NIfTI_dir=${PKG_DIR}/NIfTI


if [[ $QA == ${soft} ]]; then qa=1; else qa=0; fi

if [[ $SLICE_TIME == ${soft} ]]; then slice_time=1; else slice_time=0; fi

if [[ $REALIGN == ${soft} ]]; then realign=1; else realign=0; fi

if [[ $UNWARP == ${soft} ]]; then unwarp=1; else unwarp=0; fi

if [[ $SMOOTH_SOFT == ${soft} ]]; then smooth=$SMOOTH; else smooth=0; fi

if [[ $NORM == ${soft} ]]; then norm=1; else norm=0; fi

if [[ $soft == $SPMW ]]; then
    if [[ $norm -eq 1 ]]; then
        norm=$NORMTYPE
    else
        norm='none'
    fi
fi


eval "cat << EOF  > $fname_full
$(<${save_dir}/pfile_template_${soft}.txt)
EOF"


echo "${label} Done. Finished writing ${fname_full}"

  
