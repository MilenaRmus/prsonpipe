#!/bin/bash
# This script converts raw data from tarballed dicom to nifti
# Based on neuropipe convert-and-wrap-raw-data.sh by mgsimon@princeton.edu
# 28 July 2016 Judith Mildner (JNM) edits to turn this into prsonpipe script (spock compatible)
###################################################
# Packages used:
#    FSL
#    MicroGL (dcm2niix)
# Arguments:    
#   1. subject
#SBATCH -J "convert"
#SBATCH -o ../../output/convert_%j.out
#SBATCH -p all
#SBATCH -t 2880
#SBATCH --mail-type=FAIL

set -e  # fail immediately on error

#Get the name of the directory this script is in, to create full path to globals.par
#script_dir="$( cd "$(dirname "$0")" ; pwd -P )"
#Assuming the scripts dir is somewhere in the full path, this finds globals.par
#source "${script_dir%scripts/*}/scripts/globals.par"
source ../globals.par

module load mricrogl # Make sure all necessary packages are available (spock) -JNM
module load fsl

subj=$1
full_subj=$2
dicom_archive="${PROJECT_DIR}/auxil/archive/dicom/raw_${full_subj}.tar.gz"
output_dir="${PROJECT_DIR}/raw/"
run_order_file="${PROJECT_DIR}/auxil/runorders/${full_subj}.txt"
ERROR_FLAG=ERROR_RUN
PREFIX=scan
output_ext=.nii #If changing the extension, make sure to also change the dcm2niix conversion flag
gz=1 #1 for gzipped nifti's 2 for no gzip
label="[CONVERT]"

FSLOUTPUTTYPE=NIFTI #Convert 16-bit scans to FLOAT32 data type to retain UINT16 range

  echo "${label} Unpacking $subj at $(date)"

    echo "${label} Unpacking $subj at $(date)"
  #unpack and convert data to nifti
  temp_dicom_dir=$(mktemp -d -t tmp.XXXXXX)
  temp_output_dir=$(mktemp -d -t tmp.XXXXXX)
  tar --extract --gunzip --file=$dicom_archive --directory=$temp_dicom_dir
  echo "${label} Converting to nifti at $(date)"
  dcm2niix -z n -o $temp_output_dir -f ${PREFIX}_%2s $temp_dicom_dir 1>/dev/null

#make sure naming scheme does not output too many leading zeros (bug in dcm2niix)
  for filename in $temp_output_dir/*${output_ext}; do
    file_suf=$(echo ${filename%${output_ext}} | egrep -o '\_.*$' | tr -d \._)
    if [ ${#file_suf} -le 3 ]; then continue; fi
    newname="${temp_output_dir}/${PREFIX}_${file_suf:(-2)}${output_ext}"
    if [ "$filename" != "newname" ] && [ -e $newname ]; then
     mv $filename ${newname%${output_ext}}x${output_ext}
    elif [ "$filename" != "$newname" ] && [ ! -e $newname ]; then
      mv $filename $newname;
    fi
  done

  echo "${label} Converting to 32-bit and renaming at $(date)"

  for nifti in $(ls -1 $temp_output_dir); do
     fslmaths $temp_output_dir/$nifti $temp_output_dir/$nifti -odt float
  done


    # strip blank lines and comments from run order file
    stripped_run_order_file=$(mktemp -t tmp.XXXXX)
    sed '/^$/d;/^#/d;s/#.*//' $run_order_file > $stripped_run_order_file

    # check that the actual number of scans retrieved matches what's expected, and
    # exit with an error if not.
    num_actual_scans=$(find $temp_output_dir/*${output_ext} -maxdepth 1 -type f | wc -l)
    num_expected_scans=$(wc -l < $stripped_run_order_file)
   if [ $num_actual_scans != $num_expected_scans ]; then
      echo "${label} found $num_actual_scans scans, but $num_expected_scans were described in $run_order_file. check that you're listing enough scans for your circle localizer, etc... because those may convert as more than one scan." >/dev/stderr
      rm -rf $temp_output_dir
      rm -rf $temp_dicom_dir
      continue
      #exit $UNEXPECTED_NUMBER_OF_SCANS
    fi


    # convert all scans to gzipped nifti format, and if the run order file indicates
    # how many TRs are expected in a particular scan, check that there are actually
    # that many TRs, and exit with an error if not.
    number=0
  file_array=(${temp_output_dir}/*${output_ext})

    # the sed magic here strips out comments
  {
   while read name num_expected_trs; do
    if [[ $name == $ERROR_FLAG ]]; then
     let "number += 1"
     continue
    fi
    # convert the scan
    niigz_file_prefix="${temp_output_dir}/${name}"
    mv "${file_array[$number]}" ${niigz_file_prefix}${output_ext}


      if [ -n "$num_expected_trs" ]; then
        num_actual_trs=$(fslnvols ${niigz_file_prefix})
        if [ $num_expected_trs -ne $num_actual_trs ]; then
          echo "${label} $name has $num_actual_trs TRs--expected $num_expected_trs" >/dev/stderr
          rm -rf $temp_output_dir
          rm -rf $temp_dicom_dir
          continue 2
          #exit $UNEXPECTED_NUMBER_OF_TRS
        fi
      fi
       let "number += 1"
    done
    } < $stripped_run_order_file
    rm -f $temp_output_dir/${PREFIX}*
    rm -f $stripped_run_order_file

#move the nifti's to the right directory
    pushd ${output_dir} > /dev/null
    subdirs=(${TASKS[@]/%/\/${subj}})
    mkdir ${subdirs[@]}

    if [[ $gz -eq 1 ]]; then
      pigz ${temp_output_dir}/*
    fi

   for file in $(ls $temp_output_dir); do
     # the anatomical goes in the first task dir and is then copied to the others, so SPMw doesn't get mad (matlab will not read symlinks)
      if [[ ${file} = anat* ]]; then
        lp=1
        for dir in $(ls -1); do
        echo "${subdirs[@]}/" | xargs -n 1 rsync -avq --ignore-existing "${temp_output_dir}/${file}"
        done
     #spin echo's go in each dir unless they're specific to a task
      elif [[ ${file} == *SE* ]]; then
        if [[ $( echo ${file%%/} | cut -d'_' -f 1) == 'ALL' ]]; then
          echo "${subdirs[@]}/" | xargs -n 1 rsync -avq --ignore-existing "${temp_output_dir}/${file}"
        else
          tskname=$(echo ${file} | cut -d '_' -f 1)
          mv ${temp_output_dir}/${file} ${tskname}/${subj}/
        fi
      else
        tskname=$(echo $file | cut -d'_' -f 2)
                filename=$(echo $file | cut -d'_' -f 1,3)
        mv ${temp_output_dir}/${file} ${tskname}/${subj}/${filename}
      fi
    done
    rm -rf $temp_output_dir
    rm -rf $temp_dicom_dir
    echo "${label} $subj done at $(date)"


rm -rf $temp_output_dir
rm -rf $temp_dicom_dir                                                                                                                                                   
