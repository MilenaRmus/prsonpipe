#!/bin/bash -e/
# author: Miriam Weaverdyck 8/10/16
# 8/11/16 updated to look in taskdirs
################################################################################----------
# CONTENTS:
# 1) num2subID				:	called by get_subs, converts array to proper subID form
# 2) get_subs				:	takes in an array of subjects and returns an
#								array of subject IDs in form s000
# 3) reset_step_par			:	overwrites pars.par with nothing turned on
# 4) wait_for_it			:	waits until log file contains "[STEP] Done."
# 5) update_nii				:	updates niftis to their most recently modified formats
# 6) make_matlab_array		:	makes matlab array of sub nums (000) from bash
# 								array (may be matlab-style [1 2 3])
# ??7) make_smatlab_array	:	makes matlab array of sub ids ('s000') from bash array
# 								(may be matlab-style [1 2 3])
# 8) unzip_epi_anat			:	unzips all epi*.nii.gz and anat*.nii.gz files
# 								based on inputted subs and directory using unpigz
# ??9) zip_all				:	zips all files based on inputted subs and
#								directory using pigz
################################################################################----------

# Get the name of the directory this script is in, to create full path to globals.par
#script_dir="$( cd "$(dirname -- "$0")" ; pwd -P )"
script_dir="$(dirname -- "$(pwd)")"

# Assuming the scripts dir is somewhere in the full path, this finds globals.par
source "${script_dir%scripts*}/scripts/globals.par"
source "${PARS_DIR}/pars.par"

################################################################################----------
# 1)
# whatis $var
# author: Miriam Weaverdyck August 3, 2016
# This function takes in an array of numbers and returns an array of subject IDs.
# Called by get_subs - same args and output
# Arguments:
#  var
###########################################

function whatisit {
	label_fun='[WHAT]'
	var=$1

	if [[ -z $var ]]; then echo ${return_opts[0]}; return 0; fi

	# test if var is a task
	for t in "${TASKS[@]}"; do
		if [[ $var == $t ]]; then echo $isTSK; return 0; fi # TASK
	done

	# test if var is a directory
	if [[ -d "${var}" ]] || [[ -d "${PROJECT_DIR}/${var}" ]]; then
		echo $isDIR # DIRECTORY
		return 0
	fi

	# test if var is a sub ID
	re_sub='^s[0-9]{3}$'
	re_num='^[0-9]+$'
	if [[ "$var" =~ ${re_sub} ]]; then
		echo $isSUB # SUBJECT ID
		return 0
	# test if var is a number
	elif [[ $var =~ $re_num ]]; then
		echo $isNUM # NUMBER
		return 0
	fi

	echo $isIDK
	return 0
}
function isTSK { if [[ $(whatisit $1) == $isTSK ]]; then echo true; else echo false; fi }
function isDIR { if [[ $(whatisit $1) == $isDIR ]]; then echo true; else echo false; fi }
function isSUB { if [[ $(whatisit $1) == $isSUB ]]; then echo true; else echo false; fi }
function isNUM { if [[ $(whatisit $1) == $isNUM ]]; then echo true; else echo false; fi }
function isIDK { if [[ $(whatisit $1) == $isIDK ]]; then echo true; else echo false; fi }

function join_by { local IFS="$1"; shift; echo "$*"; }

################################################################################----------
# 1)
# num2subID ${var[@]}
# author: Miriam Weaverdyck August 3, 2016
# This function takes in an array of numbers and returns an array of subject IDs.
# Called by get_subs - same args and output
# Arguments:
#  var[@] (subject array -- e.g. (1 {3..5}))
###########################################

function num2subID {
	label_func='[NUMSUB]'
	unset SUBIDS
	#re_num='^[0-9]+$'

	snums=( "$@" )
	i=0
	for snum in "${snums[@]}"; do
		# check current format
		form=$(whatisit "$snum")
		if [[ $form == ${isSUB} ]]; then
			#correct format (s000)
			SUBIDS[$i]="${snums[$i]}"
		elif [[ $form == ${isNUM} ]]; then
			# is number
			# convert to form s000
			if [[ "${#snum}" -eq 3 ]]; then
				# 3-digit number
				SUBIDS[$i]=s"${snums[$i]}"
			elif [[ "${#snum}" -eq 2 ]]; then
				# 2-digit number
				SUBIDS[$i]=s0"${snums[$i]}"
			elif [[ "${#snum}" -eq 1 ]]; then
				# 1-digit number
				SUBIDS[$i]=s00"${snums[$i]}"
			fi
		else
			echo "${label_func} Unrecognized subject ID format: '${snum}'"
			exit 1
		fi
		i=$(($i + 1))
	done
}

################################################################################----------
# 2)
# get_subs function
# author: Miriam Weaverdyck August 3, 2016
# This function returns an array of subject IDs in form s000
###########################################
# Arguments (1 or 2 total):
#  TSK (task name to look at)
#  choose 1:------------------------
#  | none (will run all new subjects)
#  | var[@] OR s001 2 05 etc. (subject array -- e.g. (1 {3..5}))
#  | 'all' (will run all subjects)
# Outputs:
#  SUBS (array of subjects in form s000)
###########################################

function get_subs {
	label_func='[GETSUB]'
	set -e # stop immediately when an error occurs
	unset SUBS

	# DETERMINE TASK
	# task was inputted
	$(isTSK $1) && tsk=$1 && shift
	# if only one task in study
	[[ ${NUM_TASKS} -eq 1 ]] && tsk=$TASKS

	# INPUT DIRECTORY
	if $(isDIR $1); then
		if [[ ${1:0:1} == '/' ]]; then inputdir=$1;
		else inputdir=${PROJECT_DIR}/$1; fi
		shift
	else
		# default is raw directory
		inputdir=${PROJECT_DIR}/raw/$tsk
	fi

	# OUTPUT DIRECTORY
	if $(isDIR $1); then
		if [[ ${1:0:1} == '/' ]]; then outputdir=$1;
		else outputdir=${PROJECT_DIR}/$1; fi
		shift
	else
		# default is prep directory
		outputdir=${PROJECT_DIR}/prep/$tsk/${wd_dir}
	fi

	input_subs=( "$@" )

	# find all possible subjects
	i=0; for s in $(ls -d ${inputdir}/s*/ | xargs -n 1 basename); do
		subs_all[$i]=$s
		i=$(($i + 1))
	done

	# NEW SUBJECTS
	if [[ -z ${input_subs} ]] || [[ ${input_subs} == 'new' ]]; then # zero input arguments
		# delete old subjects
		i=0; for s in "${subs_all[@]}"; do
			$(isDIR ${outputdir}/${s}) && unset subs_all[$i]
			i=$(($i + 1))
		done
		# Make list of all new subjects, ignoring the empty elements
		i=0; for s in "${subs_all[@]}"; do
			[[ ! -z $s ]] && SUBS[$i]=$s && i=$(($i + 1))
		done
		# SUBS now contains an array of new subjects that have not been preprocessed
		echo "${label_func} No subjects given. Selecting all NEW subjects for task ${tsk}"

	# ALL SUBJECTS: run all subjects in task
	elif [[ ${input_subs} == 'all' ]]; then
		SUBS=( "${subs_all[@]}" )
		echo "${label_func} Selecting ALL subjects for task ${tsk}"

	# RUN SELECT SUBJECTS: run only the subjects inputted
	else
		# convert subject numbers to form (s000)
		num2subID ${input_subs[@]}
		SUBS=( "${SUBIDS[@]}" )
		echo "${label_func} Selecting valid INPUTTED subjects for task $tsk"
		for s in "${SUBS[@]}"; do
			if [[ ! "${subs_all[@]}" =~ "$s" ]]; then
				SUBS=(${SUBS[@]//*$s*});
				echo "$label_func $s is not a valid subject. Excluding..."
			fi
		done
	fi

	# Remove subjects in $EXCLUDE_SUBS from subject array
	for s in "${EXCLUDE_SUBS[@]}"; do SUBS=(${SUBS[@]//*$s*});
		[[ ${SUBS[@]} =~ $s ]] && echo "$label_func Removing excluded subject $s"
	done
	echo "${label_func} SUBS=( ${SUBS[@]} )"
}

################################################################################
# 3)
# reset_step_par
# author: Miriam Weaverdyck August 10, 2016
# This function rewrites step.par such that all preprocessing steps are off
###########################################

function reset_step_par () {
cat <<EOT > ${PARS_DIR}/step.par
wd_dir=$wd_dir
# turn off everything
QA='none'
SLICE_TIME='none'
REALIGN='none'
UNWARP='none'
NORM='none'
VOX_SIZE=$VOX_SIZE
SMOOTH_SOFT='none'
SMOOTH=$SMOOTH
SNR='none'
SLICES=0

# turn on these steps:
EOT
}

################################################################################
# 4)
# wait_for_it
# author Miriam Weaverdyck, August 22, 2016
# This function waits until logfile contains "[STEP_label_func] Done."
###########################################
# Arguments (2 total):
#  label 	: the label written in the logfile (must be all caps in logfile)
#  logfile	: the logfile to search in
###########################################
function wait_for_it {
	label_func='[WAIT]'
	if [[ ! $# -eq 2 ]]; then
		echo "${label_func} Please specify a step_label_func to search for and a logfile to search in. Aborting..."; exit;
	fi

	step_label_func=$(echo $1 | cut -d "[" -f2 | cut -d "]" -f1)
	logfile=$2
	SLEEP_INTERVAL=5   # this is in seconds
        load_interval=$(($SLEEP_INTERVAL/5))
	while [[ -z $(grep "\[${step_label_func}\] Done." "$logfile" -s) ]]; do
		# still running...
                printf "${label_func} Waiting for ${step_label_func}.    \r"
                sleep $load_interval
                printf "${label_func} Waiting for ${step_label_func}..   \r"
                sleep $load_interval
                printf "${label_func} Waiting for ${step_label_func}...  \r"
                sleep $load_interval
                printf "${label_func} Waiting for ${step_label_func}.... \r"
                sleep $load_interval
                printf "${label_func} Waiting for ${step_label_func}.....\r"
                sleep ${load_interval}
 	done

	echo "${label_func} ${step_label_func} finished (based on logfile $logfile). Moving on..."
}

################################################################################
# 5)
# update_nii
# author Miriam Weaverdyck, August 23, 2016
# This function updates niftis based on prefix input
###########################################
# Arguments (1 total):
#  wd 		: full directory containing sdirs, which contain files to be unzipped
#  steps  	: the prefix (in original order) of the epi that should be copied
#  subs[@] 	: bash array of subs
###########################################

function update_nii {
	label_f='[UPDATE_NII]'
	unset prefix;
	if [[ ! $# -ge 3 ]]; then
		echo "${label_func} Please specify a prep working directory (that contains subdirs), the steps to update to, and an array of subs to update. Aborting..."; exit;
	fi
	wd=$1; shift # directory of sdirs
	steps=$1; shift # list of prefixes
	subs=( "$@" ) # array of subjects

	num2subID "${subs[@]}" # change subs into proper s-format
	log_wd="${wd}/LOG.txt"
	label_func=${label_f}

	# for each character in the list of step prefixes,
	for (( i=0; i<${#steps}; i++ )); do
		step="${steps:$i:1}";
		# reverse steps to create the prefix of the nii files to update
		prefix=${step}${prefix};
	done

	#echo "${label_func} $(date) updating sub(s) ${SUBIDS[@]} epi runs with prefix '${prefix}'" | tee -a "${log}"

	# for every subject
	for s in "${SUBIDS[@]}"; do
		pushd ${wd}/${s} > /dev/null # move into subject folder, quietly
		# select their logfile
		log=LOG.txt
		echo "${label_func} $(date) updating $s epi runs with prefix '${prefix}'" | tee -a "${log}" "${log_wd}"

		for n in $(ls *.nii); do
			if [[ -f ${n}.gz ]]; then
				echo "${label_func} ${s}/${n}.gz already exists, not zipping ${n}" | tee -a "${log}";
			else
				pigz ${n} 	# zip all niftis in folder
				echo "${label_func} $(date) ${s}/${n} nifti zipped using pigz." | tee -a "${log}"
			fi
		done
		# count number of original epi_r##.nii.gz files there are
		num_runs="$(find ./ -type f -name 'epi_r*.nii.gz' | wc -l)";
		# go through and store each of those filenames in array runs[@]
		for ((i=1; i<=${num_runs}; i++)); do
			runs[$i]="$(find ./ -type f -name 'epi_r*.nii.gz' | head -$i | tail -1 | xargs -n 1 basename)";
		done
		# go through runs[@] and find the corresponding epis with prefixes, then update original file
		for r in "${runs[@]}"; do
			new_nii=${prefix}${r}
			cp "${new_nii}" "${r}";
			mod_date="$(stat -c %y ${new_nii} | cut -d ' ' -f1)";
			echo "${label_func} $(date) ${r} updated to version: ${new_nii} from ${mod_date}" | tee -a "${log}";
		done
		if [[ -z ${new_nii} ]]; then echo "${label_func} $(date) no niftis with prefix ${prefix} found." | tee -a "${log}"; fi
		echo "${label_func} Done. $(date)" | tee -a "${log}"
		popd > /dev/null # move out of subject folder, quietly
	done
}

################################################################################
# 6)
# make_matlab_array
# author Miriam Weaverdyck, August 25, 2016
# This function makes a matlab array from an array input
###########################################
# Arguments (1 total):
#  array 	: bash type array (may be matlab [1 2 3] format).  If array of (s000 s001 etc), converts to [000 001 etc]
###########################################

function make_matlab_array {
	bash_array=( "$@" )
	# check if subjects in matlab array or bash array
	if [[ ${bash_array:0:1} == '[' ]]; then
		# input was matlab array
		matlab_array=''
		for s in "${bash_array[@]}"; do
			matlab_array="${matlab_array} $s"
		done
	else
		# input was bash array
		matlab_array='['
		for s in "${bash_array[@]}"; do
			if [[ ${s:0:1} == s ]]; then
				matlab_array="${matlab_array}${s:1:3} "
			else
				matlab_array="${matlab_array}${s} "
			fi
		done
		matlab_array="${matlab_array}]"
	fi
	echo "${matlab_array}"
}

################################################################################
# 7)
# make_smatlab_array
# author Miriam Weaverdyck, August 25, 2016
# This function makes a matlab array from an array input
###########################################
# Arguments (1 total):
#  array[@] 	: bash type array (may be matlab [1 2 3] format).  If array of (s000 s001 etc) or (1 2 3), converts to ['s000' 's001' etc]
###########################################

function make_smatlab_array {
	re_num='^[0-9]+$'
	bash_array=( "$@" )
	unset num; unset c
	# check if subjects in matlab array or bash array
	if [[ ${bash_array:0:1} == '[' ]]; then
		# input was matlab array
		matlab_array=''
		# for every element of the inputted array
		for s in "${bash_array[@]}"; do
			len=${#s};
			# go through each character, determine if number
			for ((j=0; j<$len; j++)); do
				c=${s:${j}:1}
				if [[ $c =~ ${re_num} ]] || [[ $c == 's' ]]; then
					num=${num}${c}
				else
					# reached non-number character, convert num to subID format and add to matlab_array
					if [[ ! -z $num ]]; then
						num2subID ${num[@]}; matlab_array="${matlab_array}'${SUBIDS}'${c}"
					else matlab_array="${matlab_array}${c}"; fi
					unset num
				fi
			done
		done
	else
		num2subID ${bash_array[@]}
		# input was bash array
		matlab_array='['
		for s in "${SUBIDS[@]}"; do matlab_array="${matlab_array}'${s}' "; done
		matlab_array="${matlab_array}]"
	fi
}

################################################################################
# 8)
# unzip_epi_anat
# author Miriam Weaverdyck, September 15, 2016
# This function unzips epi*.nii.gz and anat*.nii.gz using parallel gzip
###########################################
# Arguments (1 total):
#  subs[@] 	: bash array of subs
#  d 		: directory containing sdirs, which contain files to be unzipped
###########################################

function unzip_epi_anat {
	d=$1; shift
	subs=( "$@" )
	num2subID ${subs[@]}
	echo "unzipping subjects: ${SUBIDS[@]}"
	for s in "${SUBIDS[@]}"; do
		pushd ${d}/${s} > /dev/null # move into subject folder, quietly
		for n in $(ls anat*.nii.gz); do
			if [[ -f ${n%.gz} ]]; then
				echo "${n%.gz} already exists, not unzipping ${n}" #| tee -a "${log}";
			else
				unpigz ${d}/${s}/${n} 	# zip all niftis in folder
				echo "${n} nifti unzipped using unpigz." #| tee -a "${log}"
			fi
		done
		for n in $(ls epi*.nii.gz); do
			if [[ -f ${n%.gz} ]]; then
				echo "${n%.gz} already exists, not unzipping ${n}" #| tee -a "${log}";
			else
				unpigz ${d}/${s}/${n} 	# zip all niftis in folder
				echo "${n} nifti unzipped using unpigz." #| tee -a "${log}"
			fi
		done
		echo "unzipped $s zipped niftis"
		popd > /dev/null
	done
}

################################################################################
# 9)
# zip_all
# author Miriam Weaverdyck, September 15, 2016
# This function zips all files based on inputted subs and directory using pigz
###########################################
# Arguments (1 total):
#  subs[@] 	: bash array of subs
#  d 		: directory containing sdirs, which contain files to be unzipped
###########################################

function zip_all {
	d=$1
	subs=( "$@" )
	num2subID ${subs[@]}
	for s in "${SUBIDS[@]}"; do
		pushd ${wd}/${s} > /dev/null # move into subject folder, quietly
		for n in $(ls *.nii); do
			if [[ -f ${n}.gz ]]; then
				echo "${label_func} ${s}/${n}.gz already exists, not zipping ${n}" | tee -a "${log}";
			else
				pigz ${n} 	# zip all niftis in folder
				echo "${label_func} $(date) ${s}/${n} nifti zipped using pigz." | tee -a "${log}"
			fi
		done
		popd > /dev/null
	done
}

################################################################################
# 10)
# full_dir
# author Miriam Weaverdyck, May 1, 2017
# This function outputs the full path to a directory
###########################################
# Arguments (1 total):
#  input	: directory
###########################################

function full_dir {
	label_func='[FULLDIR]'
	input=$1
	if ! $(isDIR $input); then
		echo "$label_func ERROR: Could not find $input. Inputted directory must be: "
		echo "$label_func     a) an absolute path (e.g. /jukebox/tamir/), or "
		echo "$label_func     b) a relative path from your project directory (e.g. prep/TSK/), or"
		echo "$label_func     c) a relative path from your current directory (e.g. ./DARTEL if you are in scripts)"
		exit 1
	elif [[ -d $input ]]; then
		# absolute path
		if [[ ${input:0:1} == '/' ]]; then echo "$input"
		# relative path from current directory
		else echo "$(pwd)/${input}"; fi
	else
		# relative path from project directory
		echo "${PROJECT_DIR}/${input}"
	fi
}
