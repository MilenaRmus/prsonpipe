#!/bin/env bash
# convert_check
# 2016: Judith Mildner, jmildner@princeton.edu
# Update 04/22/2017: JM
#
# convert_check goes through subid_list.txt inside auxil/archive. For each subject
# in the list, it checks for 1) no existing raw dir, 2) a dicom archive, 3) a run
# order file. If these conditions are met, the script will launch convert_data
# for the subject. Finally, it launches finish_convert, which will 'finish' the
# log file when all subjects are done (used by funcs: wait_for_it)
###############################################################################----------
# files sourced:
#  globals.par
#  ${PROJECT_DIR}/auxil/archive/subid_list.txt
#
# flags:
#  [-l <filename>] : full path to log file
#                    default: ${PROJECT_DIR}/auxil/archive/LOG_convert.txt
#  [-d <job ID>]   : sbatch dependency for convert_data jobs
#  [-f]            : force convert (overwrite raw if it already exists)
#  [subjects]      : last arguments (without flags) can be subject IDs
###############################################################################----------
set -e

function help_func () {
cat << END
convert_check [-lh]
Description:
------------
  convert_check goes through subid_list.txt inside auxil/archive. For each subject
  in the list, it checks for 1) no existing raw dir, 2) a dicom archive, 3) a run
  order file. If these conditions are met, the script will launch convert_data
  for the subject. Finally, it launches finish_convert, which will 'finish' the
  log file when all subjects are done (used by funcs: wait_for_it)
Usage:
------
  [-h | --help | -help]
    Display this help
  [-l <filename>]
    Override the default log file location with a different filename (full path).
    Default: ${PROJECT_DIR}/auxil/archive/LOG_convert.txt
  [-d <job ID>]
    sbatch dependency for convert_data jobs
  [-f]
    force convert (overwrite raw if it already exists)
  [subjects]
    list of subjects to convert (default is all unconverted subjects in subid_list.txt)
END
}

######################### SET UP & PARSE ARGUMENTS #############################

#First, check for help flag (multi-character flags not supported by getopts)
if [[ $@ =~ --help|-help ]]; then help_func; exit; fi

#Get the name of the directory this script is in, to create full path to globals.par
script_dir="$( cd "$(dirname "$0")" ; pwd -P )"
#Assuming the scripts dir is somewhere in the full path, this finds globals.par
source "${script_dir%scripts/*}/scripts/globals.par"
source "${SCRIPT_DIR_UTIL}/funcs"
#Load subid_list
SUBID_LIST=${PROJECT_DIR}/auxil/archive/subid_list.txt

#logfile variables (flag can overwrite filename initialized here)
label="[CONVERT]"
logfile=${PROJECT_DIR}/auxil/archive/LOG_convert.txt

#Parse flags other than help
while getopts ":l:d:fh" opt; do
  case $opt in
    l)
      logfile=$OPTARG
      if [ ! -d $(dirname $logfile) ]; then
        echo "$label ERROR: $logfile directory does not exist."
        exit 1
      fi
      touch $logfile
      echo "$label Using logfile: $logfile instead of default" | tee -a $logfile
      ;;
    d)
      init_dependency=$OPTARG
      #check if this is a number
      #digit_re='^[0-9]+$'
      if [[ $(whatisit $init_dependency) != $isNum ]]; then
        echo "$label dependency job number $init_dependency is not a number."
        exit 1
      fi
      echo "$label Using initial dependency $init_dependency" | tee -a $logfile
      ;;
    f)
      force=TRUE  
      ;;
    h)
      help_func
      exit
      ;;
    \?)
      echo "$label ERROR: unknown flag specified: ${opt}. Use -h for help."
      exit 1
      ;;
    : ) #Catch options without arguments
      echo "$label ERROR: $OPTARG requires an argument. Use -h for help."
      exit 1
    esac
done
#remove used input args
shift $((OPTIND -1))
#check if there are remaining arguments, that have not yet been processed
if [[ ! -z $@ ]]; then
  convert_subs=( "$@" ) 
  num2subID $convert_subs
  convert_subs=( "${SUBIDS[@]}" )
  echo "$label Converting only subjects ${convert_subs[@]}." | tee -a $logfile
fi

############################## START PROCESSING ################################

#Remove empty lines from subid_list
sed -i '/^\s*$/d' $SUBID_LIST

if [ ! -s $SUBID_LIST ]; then
  echo "$label ERROR: $SUBID_LIST is empty."
  exit 1
fi
exec 9<> $SUBID_LIST #open file descriptor for subid_list.txt file -JNM
#read in lines from subid_list, assign them to variables, and loop through subid_list
  while read -r -u 9 full_subj subj imgtype; do
    echo "${label}" | tee -a $logfile
    #test if imagetype in subid_list is dicom. Could support other types in the future
    if [[ $imgtype != 'dicom' ]]; then
      echo "${label} No dicom data available for subject $full_subj" | tee -a $logfile
      continue;
    fi
    if [[ $full_subj = '' ]]; then continue; fi
    output_prefix=$subj
    if [ -n $convert_subs ] && [[ ! $subj =~ $convert_subs ]]; then continue; fi
    #1) check if raw directory does not exist
    output_dir="${PROJECT_DIR}/raw/"
    if [[ -n $(find $output_dir -name $subj) ]] && [[ $force != TRUE ]]; then
      echo "${label} $subj already converted. Skipping $full_subj" \
        | tee -a $logfile
      continue
    fi

    #2) check if dicom archive exists
    dicom_archive="${PROJECT_DIR}/auxil/archive/dicom/raw_${full_subj}.tar.gz"
    if [[ ! -f $dicom_archive ]]; then
      echo "${label} ${dicom_archive} does not exist. Skipping $full_subj." \
        | tee -a $logfile
      continue
    fi

    #3) check if run order file exists
    run_order_file="${PROJECT_DIR}/auxil/runorders/${full_subj}.txt"
    if [[ ! -f $run_order_file ]]; then
    echo "${label} ${run_order_file} does not exist. Skipping $full_subj." \
      | tee -a $logfile;
    continue
    fi
    if [[ ! -z "${init_dependency}" ]]; then 
      init_dep_flag="--dependency=afterok:$init_dependency"
    fi
    #If all 3 criteria are passed, convert this subject's data
    if [[ -n $(find $output_dir -name $subj) ]] && [[ $force == TRUE ]]; then
      echo "$label removing existing ${output_dir}/*/${subj}" | tee -a $logfile
      find $output_dir -name $subj -exec rm -r {};
    fi
        
    job_id=$(sbatch $init_dep_flag -t 60 convert_data $subj $full_subj | grep -o '[0-9]*')
    jobs+=":$job_id"
    echo "$label Submitted job $job_id to convert subject $subj" | tee -a $logfile
  done

# Create dependency for finish jobs
unset dependency_flag
jobs=${jobs#:}
# if no convert jobs were started, finish depends on initial dependency
if [[ -z "$jobs" ]]; then
  dependency_flag="--dependency=afterok:$init_dependency"
  # Run the finish_convert job
  sbatch -t 1 -J finish_convert -p all $dependency_flag finish_log ${label} ${logfile}
else
  #if no jobs were started, finish without invoking finish_log (to avoid queue)
  echo "${label} Done. No subjects converted. $(date)" | tee -a $logfile
fi

exec 9>&- #close subid_list.txt. file
