#!/bin/bash
# retrieve_dcm
#
# author:  adapted from neuropipe retrieve_data script
# March 15, 2016 Judith Mildner (JNM) - Changed DICOM_DIR variable to Tamir lab volume 
# name to get data from lab volume instead of conquest 
#
# July 26, 2016 Judith Mildner - Adapt for new prsonpipe filestructure, and require 
# user input of subject ID.
#
# April 28, 2017 Miriam Weaverdyck - modified for the pipeline DAMN2.0: adapted for new
# file structure
#
# downloads raw DICOM data for the specified subject from jukebox and compresses 
# it into a gzipped tar file at the file path specified by output_path
################################################################################----------
# Files sourced:
#  globals.par
# Flags (0-1):
#  [-h | -help | --help]   : shows help
#  [-f]                    : forces overwrite if the subject already exists
# Arguments:
#  subname		   : full subject name as saved in /jukebox
#				can use multiple, separated by space
################################################################################----------
# sbatch variables
#SBATCH -J retreive-%j
#SBATCH -o ../output/retrieve-%j.out
#SBATCH -t 60

set -e # fail immediately on error
label='[RET_DCM]'

function help_func () {
cat << END
  retrieve_from_conquest [-h] <subname>
  Description:
  ------------
    downloads raw DICOM data for the specified subject from jukebox and compresses 
    it into a gzipped tar file in auxil/archive/dicom
  Usage:
  ------
    [-h | --help | -help]
      Display this help
    [-f]
      Forces overwrite if subject's data already exists
    <subname>
      Full sub ID(s) from scanner or partial name (to retrieve all matching subjects)
END
}
######################### SET UP & PARSE ARGUMENTS #############################

#First, check for help flag (multi-character flags not supported by getopts)
if [[ $@ =~ -h|--help|-help ]]; then help_func; exit; fi
if [[ $1 == -f ]]; then force=true; shift; fi 
#Get the name of the directory this script is in, to create full path to globals.par
d="$(dirname -- "$(pwd)")"
# source globals.par
source "${d%scripts*}/scripts/globals.par"
source ${SCRIPT_DIR_UTIL}/funcs

# add necessary names (no longer in globals.sh)
DICOM_DIR="${BACKUP_DIR}/raw"
RUNORDER_PATH="${PROJECT_DIR}/auxil/runorders"
RUNORDER_TEMPLATE="run-order.txt"
DATA_DIR="${PROJECT_DIR}/auxil/archive/dicom"
# take in all arguments
subs=( "$@" )

# create archive/dicom if it doesn't already exist
if [ ! -e $DATA_DIR ]; then mkdir $DATA_DIR; fi

for sub in "${subs[@]}"; do
	#SUBJ=$1

	# Make sure inputted directory exists and is unique
	#SUBJFILES=$(ls -d /$DICOM_DIR/$SUBJ* 2> /dev/null | wc -l)
	subdir=$(echo $DICOM_DIR/*$sub*)
	numfiles=$(ls -d $subdir 2> /dev/null | wc -l)

	if [ "${numfiles}" -eq 0 ]; then
		echo "$label ERROR: Not a directory: $subdir"
		exit 1
	fi

	IFS=' ' read -r -a subfiles <<< "$subdir"

	if [ "$numfiles" -gt 1 ]; then
		echo "$label WARNING: More than one subject found. Retrieving:"
		for f in "${subfiles[@]}"; do echo "$label 	$f"; done
		echo "$label"
	fi

	for SUBJFILE in "${subfiles[@]}"; do 
		echo
		SUBJ=$(basename $SUBJFILE)
		num2subID ${SUBJ: -3}
		output_file="raw_${SUBJ}.tar.gz"
		output_dir=$DATA_DIR

		# if subject already retrieved, continue on to next subj
		if [[ -e "${output_dir}/${output_file}" ]] && [[ $force != true ]]; then
			echo "$label Skipping subject ${SUBJ} - already exists"
			echo $label; continue
		elif [[ -e "${output_dir}/${output_file}" ]] && [[ $force == true ]]; then
			echo "${label} Removing existing data for ${SUBJ}"
			rm -rf "${output_dir}/${output_file}"
		fi

		echo "$label $(date) Retrieving $SUBJ"
		tmp_dir_zip="$(mktemp -d)"
		cp -r $DICOM_DIR/$SUBJ*/dcm/* $tmp_dir_zip/

		tmp_dir="$(mktemp -d)"
		
		# Trap to delete temp directories if the script fails
 		function finish {
  		  rm -rf $tmp_dir_zip
  		  rm -rf $tmp_dir
  		}
  		trap finish EXIT
	
		mkdir $tmp_dir/$SUBJ/

		# move into temp dir, quietly
		pushd $tmp_dir_zip/ > /dev/null

		# unzip the files
		for f in *.gz; do
			STEM=$(basename "${f}" .gz) 
			unpigz -c "${f}" > $tmp_dir/$SUBJ/"${STEM}"
		done
		popd > /dev/null
		# delete temp dir
		rm -rf $tmp_dir_zip

		#remove the .dcm ending, reformat: 
		pushd $tmp_dir/$SUBJ > /dev/null
		set +e # allowing errors temporarily, because prisma has phoenix report files, 99*unknown.dcm.gz which will throw errors

		for f in * ;
		do
			FILENAME=$(basename "$f")
			FILENAME="${FILENAME%.*}"
			mv $f $FILENAME;
		done

		for file in * ;
		do
			temp_file_decomp=(`echo $file | tr "-" "\n"`)
			temp_series=`printf "%03d" ${temp_file_decomp[0]}`
			temp_imagenum=`printf "%04d" ${temp_file_decomp[1]}`
			temp_TE=`printf "%03d" ${temp_file_decomp[2]} 2> /dev/null`
			temp_name=$temp_series'_'$temp_imagenum'_'$temp_TE
			mv $file $temp_name;
		done

		set -e # returning to setting that fails upon error 

		for file in * ; 
		do 
		   mv $file $SUBJ$file; 
		done

		#popd > /dev/null
		#pushd $tmp_dir/$SUBJ > /dev/null

		tar --create --use-compress-program=pigz --file=$output_file *
		popd > /dev/null
		mv $tmp_dir/$SUBJ/$output_file $output_dir

		rm -rf $tmp_dir

		#Check id subid_list.txt file exists, then add subject to subid_list.txt if it's not already there
		subid_list="${PROJECT_DIR}/auxil/archive/subid_list.txt"

		if [ ! -e ${subid_list} ]; then
			cat > ${subid_list}
		fi

		newline="${SUBJ} s${SUBJ:(-3)} dicom"
		if grep -q "$SUBJ" "$subid_list"; then
			echo "$label ${SUBJ} is already in subid_list.txt. Keeping existing entry. Please check if it's correct:"
			grep "$SUBJ" "$subid_list"
		fi
		grep -q -F  "$SUBJ" "$subid_list" || echo "$newline" >> $subid_list

		#Runorder file
		if [ ! -e ${RUNORDER_PATH}/${SUBJ}.txt ]; then
			echo "Creating run order file for ${SUBJ}"
			cp ${RUNORDER_PATH}/${RUNORDER_TEMPLATE} ${RUNORDER_PATH}/${SUBJ}.txt
		else
			echo "$label Run order file for ${SUBJ} already exists"
		fi

		echo "$label Run order is:"
		cat ${RUNORDER_PATH}/${SUBJ}.txt | grep "^[^#;]"
		echo "###################################################"
		echo "$label Please check the run order for this subject. Edit ${RUNORDER_PATH}/${SUBJ}.txt if incorrect."

		echo "$label Finished retrieving ${SUBJ} data from $DICOM_DIR"
		echo
	done
done
echo "$label Done. $(date)"
