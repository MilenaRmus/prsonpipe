#!/bin/bash
#
# This script sets up all the necessary paths and files to initialize a new project.
# Run it from the scripts dir after filling out notes/study_info
# JNM August 11, 2016
###########################################
#  Arguments:
#    None or overwrite      #To overwrite and delete previous setup in the project dir. 
#                           #WILL LOSE EXISTING DATA if overwrite is chosen.
############################################
set -e 

if [[ -n $1 && $1 != 'overwrite' ]]; then
  echo "Unknown input argument $1"
  exit 1
fi

if [[ -z $1 ]] && [[ -n $(find ../ -name '*.nii') || -s ../arch/subpars/runorders/run-order.txt || -z $(grep '<<STUDY_INFO_VARS_HERE>>' globals.par) ]]; then
  echo "[INIT] This project has already been initialized." 
  echo "[INIT] If you really want to proceed, and overwrite your previous work, run init_project overwrite"
  exit 1
fi

#Source the project settings lines of study_info
source /dev/stdin <<EOF
$(sed -n '/-PROJECT\ SETTINGS-/,/-TASKS-/p' ../notes/study_info.par | head -n -1 | tail -n +2)
EOF

#append all the text between the vars delimiters to globals.pr (excluding the first and last 2 lines containing comments)
cat ${PROJECT_DIR}/notes/study_info.par | sed -n '/<<START_VARS>>/,/<<END_VARS>>/p' | head -n -2 | tail -n +3 >> ${PROJECT_DIR}/scripts/temp.txt
sed -i -e '/<<STUDY_INFO_VARS_HERE>>/r temp.txt' -e '/<<STUDY_INFO_VARS_HERE>>/d' ${PROJECT_DIR}/scripts/globals.par
rm ${PROJECT_DIR}/scripts/temp.txt
#same for runorders, but overwrite instead of append
cat ${PROJECT_DIR}/notes/study_info.par | sed -n '/<<START_RO>>/,/<<END_RO>>/p' | head -n -2 | tail -n +3 > ${PROJECT_DIR}/arch/subpars/runorders/run-order.txt

source ${PROJECT_DIR}/scripts/globals.par

#check variable names
# 3 letters & allcaps?
i=0
for name in ${TASKS[@]}; do
  if ! [[ $name == [A-Z][A-Z][A-Z] ]]; then
    echo "[INIT] Task ${name} does not follow the correct naming convention (3 uppercase letters). Converting."
    newname=$(echo ${name} | sed 's/[0-9]*//g') #strip digits from name
    newname=${newname:0:3} #cut to three chars if longer
    newname=$(echo $newname | tr [a-z] [A-Z]) #convert to uppercase if lower
    while [[ ${#newname} -lt 3 ]]; do newname=${newname}X; done #Append X's if too short until it's 3 chars
    if [[ $newname == [A-Z][A-Z][A-Z] ]]; then
      TASKS[$i]=$newname
      echo "[INIT] Changed $name to $newname"
    else
      echo "[INIT] Could not convert task name $name. Please change it in notes/study_info.par"
      exit 1
    fi      	
    ((i+=1))
  else
  	((i+=1))
  fi
done

# Unique?
if printf '%s\n' "${TASKS[@]}" | sort | uniq -c | grep -q [2-9]; then 
  echo "[INIT] Check your task names. They are not unique: ${TASKS[@]}"
  exit 1 
fi
#############################################################

if [[ $1 == 'overwrite' ]]; then rm -fr "${PROJECT_DIR}/raw/*"; rm -fr "${PROJECT_DIR}/prep/*"; rm -fr "${PROJECT_DIR}/qa/*"; fi

#Create project dirs
echo "[INIT] Running scripts/setup_backup_dirs to make sure backup directories exist on lab volume"
bash ${PROJECT_DIR}/scripts/setup_backup_dirs
echo "[INIT] Copying your file structure and scripts to your backup dir"
rsync -qav --exclude=*.gz --exclude=*.nii --exclude=*.bxh* --exclude=.git ${PROJECT_DIR} /jukebox/${LAB_NAME}/${PROJECT_NAME}/scripts
for name in ${TASKS[@]}; do
  mkdir -p ${PROJECT_DIR}/raw/${name}/
  mkdir -p ${PROJECT_DIR}/prep/${name}/{FSL,SPM,wd}
  mkdir -p ${PROJECT_DIR}/prep/${name}/DARTEL/Templates
done

echo "[INIT] Completed."
