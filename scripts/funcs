#!/bin/bash -e/
# author: Miriam Weaverdyck 8/10/16
# 8/11/16 updated to look in taskdirs
################################################################################
# CONTENTS:
# 1) num2subID			:	called by get_subs, converts array to proper subID form (s000)
# 2) get_subs			:	takes in an array of subjects and returns an array of subject IDs in form s000
# 3) reset_step_par		:	overwrites pars.par with nothing turned on
# 4) wait_for_it		:	waits until log file contains "[STEP] Done."
# ------------------------------------------------------------------------------

source globals.par

################################################################################
# 1)
# num2subID var[@]
# author: Miriam Weaverdyck August 3, 2016
# This function takes in an array of numbers and returns an array of subject IDs.   
# Called by get_subs - same args and output
# Arguments:
#  var[@] OR s001 2 05 etc. (subject array -- e.g. (1 {3..5}))
###########################################

function num2subID {
	unset SUBIDS
	re_num='^[0-9]+$'

	declare -a snums=("${!1}")
	i=0
	for snum in "${snums[@]}"; do
		# check current format
		if [[ "${snum:0:1}" == s ]] && [[ "${#snum}" -eq 4 ]] && [[ ${snum: -3} =~ $re_num ]]; then
			#correct format (s000)
			SUBIDS[$i]="${snums[$i]}"
		elif [[ $snum =~ $re_num ]]; then
			# is number
			# convert to form s000
			if [[ "${#snum}" -eq 3 ]]; then
				# 3-digit number
				SUBIDS[$i]=s"${snums[$i]}"
			elif [[ "${#snum}" -eq 2 ]]; then
				# 2-digit number
				SUBIDS[$i]=s0"${snums[$i]}"
			elif [[ "${#snum}" -eq 1 ]]; then
				# 1-digit number
				SUBIDS[$i]=s00"${snums[$i]}"
			fi
		else
			echo "Unrecognized subject ID format: ${snum}"
			echo "Please enter in one of the following formats:"
			echo "'1' such that the array looks like (1 2 5 9)."
			exit
		fi
		i=$i+1
	done
	echo "Subject list: ${SUBIDS[@]}"
}

################################################################################
# 2)
# get_subs function
# author: Miriam Weaverdyck August 3, 2016
# This function returns an array of subject IDs in form s000
###########################################
# Arguments (1 or 2 total):
#  TSK (task name to look at)
#  choose 1:------------------------
#  | none (will run all new subjects)
#  | var[@] OR s001 2 05 etc. (subject array -- e.g. (1 {3..5}))
#  | 'all' (will run all subjects)
# Outputs: 
#  SUBS (array of subjects in form s000)
###########################################

function get_subs {
	set -e # stop immediately when an error occurs
	unset SUBS
	tsk=$1

	if [[ $# -le 1 ]]; then
		if [[ $# -eq 0 ]] && [[ ${NUM_TASKS} -gt 1 ]]; then echo "Please specify a task: ${TASKS[@]}. Aborting..."; exit; fi
		if [[ $# -eq 0 ]]; then tsk=$TASKS; fi
		# NEW SUBJECTS: no subject input means run all new subjects only, based on raw/
		# make list of all subjects in raw/
		if ! [[ -d ${RAW_DIR}/${tsk}/ ]]; then echo "'${tsk}' is not a valid task name. Aborting..."; exit; fi
		i=0
		for s in $(ls -d ${RAW_DIR}/${tsk}/*/ | xargs -n 1 basename); do
			subs_all[$i]=$s;
			i=$i+1;
		done
		# check list of subjects with those in prep
		i=0
		for s in "${subs_all[@]}"; do
			d=${PREP_DIR}/${tsk}/${wd_dir}
			# see if $d (which is task's wd subfolder in prep) has subfolders, and if so, check if they match subID
			subdircount=`find ${d}/ -maxdepth 1 -type d | wc -l`
			if [[ $subdircount -gt 1 ]]; then 
				for p in $(ls -d ${d}/*/ | xargs -n 1 basename); do
					echo "examining subject $p: if same as $s, delete"
					if [[ $s == $p ]]; then
						# found folder with same name as subject.  Delete from list
						unset subs_all[$i]
						continue
					fi
				done
			fi
			i=$i+1
		done
		# Make list of all new subjects, ignoring the empty elements
		i=0
		for s in "${subs_all[@]}"; do
			if [[ ! -z $s ]]; then
				SUBS[$i]=$s
				i=$i+1
			fi
		done
		# SUBS now contains an array of new subjects that have not been preprocessed
		echo "No subjects given.  Selecting all ${#SUBS[@]} new subjects for task $tsk: ${SUBS[@]}"
	elif [[ $2 == 'all' ]]; then
		# ALL SUBJECTS: run all subjects in task, even those who have already been preprocessed
		i=0
		for s in $(ls -d ${RAW_DIR}/${tsk}/*/ | xargs -n 1 basename); do
			SUBS[$i]=$s
			i=$i+1
		done
		echo "Selecting all ${#SUBS[@]} subjects for task ${tsk}: ${SUBS[@]}"
	else
		# RUN SELECT SUBJECTS: run only the subjects inputted
		declare -a subs=("${!2}")
		# convert subject numbers to form (s000)
		num2subID subs[@]
		i=0
		for s in "${SUBIDS[@]}"; do
			for p in $(ls -d ${RAW_DIR}/${tsk}/*/ | xargs -n 1 basename); do
				if [[ $s == $p ]]; then
					# found folder with same name as subject.  Delete from list
					SUBS[$i]=$s;
					i=$i+1
				fi
			done
		done
		echo "Selecting all ${#SUBS[@]} inputted subjects for task $tsk: ${SUBS[@]}"
	fi
}

################################################################################
# 3)
# reset_step_par
# author: Miriam Weaverdyck August 10, 2016
# This function rewrites step.par such that all preprocessing steps are off
###########################################

function reset_step_par () {
cat <<EOT > $PROJECT_DIR/notes/step.par
wd_dir=$wd_dir
# turn off everything
QA='none'
SLICE_TIME='none'
REALIGN='none'
UNWARP='none'
NORM='none'
VOX_SIZE=$VOX_SIZE
SMOOTH_SOFT='none'
SMOOTH=$SMOOTH
SNR='none'
SLICES=0

# turn on these steps:
EOT
}

################################################################################
# 4)
# wait_for_it
# author Miriam Weaverdyck, August 22, 2016
# This function waits until log file contains "[INPUT] Done."
###########################################

function wait_for_it {
	if [[ $# -eq 0 ]]; then echo "[WAIT] Please specify a step to search for. Aborting..."; exit; fi

	step=${1^^}
	logfile=$2
	SLEEP_INTERVAL=10   # this is in seconds

	while [ -z "$(grep [$step] Done. $logfile)" ]; do
		# still running...
		sleep $SLEEP_INTERVAL
	done

	echo "[WAIT] $step finished (based on logfile $logfile). Moving on..."
}
